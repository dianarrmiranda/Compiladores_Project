module(stat,importS) ::= <<
from advClasses import *
from numpy import *
<stats(importS)>

def main():
    <stats(stat)>

if __name__ == "__main__":
    main()
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

assign(var,value) ::= "<var> = <value>"

binaryOperation(var,e1,op,e2) ::= "<assign(var,[e1,\" \",op,\" \",e2])>"

unaryOperation(var,op,e1) ::= "<assign(var,[op,\" \",e2])>"

point(x,y) ::= "array([<x>,<y>])"

array(elem) ::= <<
[<if(elem)><elem; separator=","><endif>]
>>

map(elem,key) ::= <<
    {<if(elem)><mapElem(elem,key); separator=","><endif>}
>>
mapElem(elem,key) ::= "<elem> : <key>"

state(label,accepting,initial) ::= "State(<label><if(accepting)>,accepting=<accepting><endif><if(initial)>,initial=<initial><endif>)"

transition(label,stateStart,stateEnd) ::= <<Transition(<label; separator=",">,<stateStart>,<stateEnd>)>>

automaton(name,state,transition) ::= "Automaton(<name>,<array(state)>,<array(transition)>)"

view(automaton,state,slocation,transition,tlocation) ::= "View(<automaton>,<map(state,slocation)>,<map(transition,tlocation)>)"

viewPort(view,cornerBottom,cornerTop) ::= "ViewPort(<view>,<cornerBottom>,<cornerTop>)"

animation(viewport) ::= "Animation(<array(viewport)>)"

play(animation) ::= "<animation>.play()"

setP(var,prop,value) ::= <<<var>.set<prop>('<value; separator=" ">')>>

importS(file) ::= "import <file>"

forIn(var,list,stat) ::= <<
    for <var> in <list>:
        <stats(stat)>
>>