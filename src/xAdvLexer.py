# Generated from xAdv.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,72,8,5,1,6,4,
        6,75,8,6,11,6,12,6,76,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,4,8,90,8,8,11,8,12,8,91,1,8,1,8,1,8,1,8,3,8,98,8,8,1,9,1,9,5,9,
        102,8,9,10,9,12,9,105,9,9,1,10,1,10,5,10,109,8,10,10,10,12,10,112,
        9,10,1,11,3,11,115,8,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,
        124,8,12,10,12,12,12,127,9,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,13,1,13,1,13,1,13,1,13,
        2,125,138,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,1,0,6,2,0,9,9,32,32,1,0,49,57,1,0,48,57,2,0,
        65,90,97,122,3,0,48,57,65,90,97,122,1,0,47,47,156,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,36,1,0,0,0,5,46,
        1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,71,1,0,0,0,13,74,1,0,0,0,15,
        80,1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,0,21,106,1,0,0,0,23,114,1,0,
        0,0,25,120,1,0,0,0,27,132,1,0,0,0,29,30,5,100,0,0,30,31,5,101,0,
        0,31,32,5,102,0,0,32,33,5,105,0,0,33,34,5,110,0,0,34,35,5,101,0,
        0,35,2,1,0,0,0,36,37,5,97,0,0,37,38,5,117,0,0,38,39,5,116,0,0,39,
        40,5,111,0,0,40,41,5,109,0,0,41,42,5,97,0,0,42,43,5,116,0,0,43,44,
        5,111,0,0,44,45,5,110,0,0,45,4,1,0,0,0,46,47,5,123,0,0,47,6,1,0,
        0,0,48,49,5,58,0,0,49,8,1,0,0,0,50,51,5,125,0,0,51,10,1,0,0,0,52,
        53,5,99,0,0,53,54,5,111,0,0,54,55,5,108,0,0,55,56,5,111,0,0,56,72,
        5,114,0,0,57,58,5,108,0,0,58,59,5,105,0,0,59,60,5,110,0,0,60,61,
        5,101,0,0,61,62,5,99,0,0,62,63,5,111,0,0,63,64,5,108,0,0,64,65,5,
        111,0,0,65,72,5,114,0,0,66,67,5,108,0,0,67,68,5,97,0,0,68,69,5,98,
        0,0,69,70,5,101,0,0,70,72,5,108,0,0,71,52,1,0,0,0,71,57,1,0,0,0,
        71,66,1,0,0,0,72,12,1,0,0,0,73,75,7,0,0,0,74,73,1,0,0,0,75,76,1,
        0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,6,6,0,0,79,
        14,1,0,0,0,80,81,5,59,0,0,81,82,1,0,0,0,82,83,6,7,0,0,83,16,1,0,
        0,0,84,85,5,34,0,0,85,89,3,21,10,0,86,87,3,13,6,0,87,88,3,21,10,
        0,88,90,1,0,0,0,89,86,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,
        1,0,0,0,92,93,1,0,0,0,93,94,5,34,0,0,94,98,1,0,0,0,95,98,3,21,10,
        0,96,98,3,19,9,0,97,84,1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,18,
        1,0,0,0,99,103,7,1,0,0,100,102,7,2,0,0,101,100,1,0,0,0,102,105,1,
        0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,20,1,0,0,0,105,103,1,0,
        0,0,106,110,7,3,0,0,107,109,7,4,0,0,108,107,1,0,0,0,109,112,1,0,
        0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,22,1,0,0,0,112,110,1,0,0,
        0,113,115,5,13,0,0,114,113,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,
        0,116,117,5,10,0,0,117,118,1,0,0,0,118,119,6,11,0,0,119,24,1,0,0,
        0,120,121,7,5,0,0,121,125,7,5,0,0,122,124,9,0,0,0,123,122,1,0,0,
        0,124,127,1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,128,1,0,0,
        0,127,125,1,0,0,0,128,129,3,23,11,0,129,130,1,0,0,0,130,131,6,12,
        0,0,131,26,1,0,0,0,132,133,5,47,0,0,133,134,5,42,0,0,134,138,1,0,
        0,0,135,137,9,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,139,1,0,
        0,0,138,136,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,42,
        0,0,142,143,5,47,0,0,143,144,1,0,0,0,144,145,6,13,0,0,145,28,1,0,
        0,0,10,0,71,76,91,97,103,110,114,125,138,1,6,0,0
    ]

class xAdvLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    AutomatonProperty = 6
    WS = 7
    Ignore = 8
    Value = 9
    INT = 10
    ID = 11
    NEWLINE = 12
    SingleLineComment = 13
    BlockComment = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'define'", "'automaton'", "'{'", "':'", "'}'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "AutomatonProperty", "WS", "Ignore", "Value", "INT", "ID", "NEWLINE", 
            "SingleLineComment", "BlockComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "AutomatonProperty", 
                  "WS", "Ignore", "Value", "INT", "ID", "NEWLINE", "SingleLineComment", 
                  "BlockComment" ]

    grammarFileName = "xAdv.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


