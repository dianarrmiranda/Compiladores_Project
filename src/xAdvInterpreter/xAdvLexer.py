# Generated from xAdv.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,204,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,102,8,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,130,8,8,1,9,4,9,133,8,9,11,
        9,12,9,134,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        4,11,148,8,11,11,11,12,11,149,1,11,1,11,1,11,1,11,3,11,156,8,11,
        1,12,1,12,5,12,160,8,12,10,12,12,12,163,9,12,1,13,1,13,5,13,167,
        8,13,10,13,12,13,170,9,13,1,14,3,14,173,8,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,5,15,182,8,15,10,15,12,15,185,9,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,5,16,195,8,16,10,16,12,16,198,9,16,1,16,
        1,16,1,16,1,16,1,16,2,183,196,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,6,
        2,0,9,9,32,32,1,0,49,57,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,
        90,97,122,1,0,47,47,218,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,42,
        1,0,0,0,5,49,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,
        65,1,0,0,0,15,101,1,0,0,0,17,129,1,0,0,0,19,132,1,0,0,0,21,138,1,
        0,0,0,23,155,1,0,0,0,25,157,1,0,0,0,27,164,1,0,0,0,29,172,1,0,0,
        0,31,178,1,0,0,0,33,190,1,0,0,0,35,36,5,105,0,0,36,37,5,109,0,0,
        37,38,5,112,0,0,38,39,5,111,0,0,39,40,5,114,0,0,40,41,5,116,0,0,
        41,2,1,0,0,0,42,43,5,100,0,0,43,44,5,101,0,0,44,45,5,102,0,0,45,
        46,5,105,0,0,46,47,5,110,0,0,47,48,5,101,0,0,48,4,1,0,0,0,49,50,
        5,97,0,0,50,51,5,117,0,0,51,52,5,116,0,0,52,53,5,111,0,0,53,54,5,
        109,0,0,54,55,5,97,0,0,55,56,5,116,0,0,56,57,5,111,0,0,57,58,5,110,
        0,0,58,6,1,0,0,0,59,60,5,123,0,0,60,8,1,0,0,0,61,62,5,58,0,0,62,
        10,1,0,0,0,63,64,5,125,0,0,64,12,1,0,0,0,65,66,5,118,0,0,66,67,5,
        105,0,0,67,68,5,101,0,0,68,69,5,119,0,0,69,70,5,112,0,0,70,71,5,
        111,0,0,71,72,5,114,0,0,72,73,5,116,0,0,73,14,1,0,0,0,74,75,5,99,
        0,0,75,76,5,111,0,0,76,77,5,108,0,0,77,78,5,111,0,0,78,102,5,114,
        0,0,79,80,5,115,0,0,80,81,5,105,0,0,81,82,5,122,0,0,82,102,5,101,
        0,0,83,84,5,102,0,0,84,85,5,111,0,0,85,86,5,110,0,0,86,87,5,116,
        0,0,87,88,5,45,0,0,88,89,5,115,0,0,89,90,5,105,0,0,90,91,5,122,0,
        0,91,102,5,101,0,0,92,93,5,108,0,0,93,94,5,105,0,0,94,95,5,110,0,
        0,95,96,5,101,0,0,96,97,5,99,0,0,97,98,5,111,0,0,98,99,5,108,0,0,
        99,100,5,111,0,0,100,102,5,114,0,0,101,74,1,0,0,0,101,79,1,0,0,0,
        101,83,1,0,0,0,101,92,1,0,0,0,102,16,1,0,0,0,103,104,5,98,0,0,104,
        105,5,97,0,0,105,106,5,99,0,0,106,107,5,107,0,0,107,108,5,103,0,
        0,108,109,5,114,0,0,109,110,5,111,0,0,110,111,5,117,0,0,111,112,
        5,110,0,0,112,130,5,100,0,0,113,114,5,104,0,0,114,115,5,101,0,0,
        115,116,5,105,0,0,116,117,5,103,0,0,117,118,5,104,0,0,118,130,5,
        116,0,0,119,120,5,119,0,0,120,121,5,105,0,0,121,122,5,100,0,0,122,
        123,5,116,0,0,123,130,5,104,0,0,124,125,5,116,0,0,125,126,5,105,
        0,0,126,127,5,116,0,0,127,128,5,108,0,0,128,130,5,101,0,0,129,103,
        1,0,0,0,129,113,1,0,0,0,129,119,1,0,0,0,129,124,1,0,0,0,130,18,1,
        0,0,0,131,133,7,0,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,
        0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,6,9,0,0,137,20,1,0,
        0,0,138,139,5,59,0,0,139,140,1,0,0,0,140,141,6,10,0,0,141,22,1,0,
        0,0,142,143,5,34,0,0,143,147,3,27,13,0,144,145,3,19,9,0,145,146,
        3,27,13,0,146,148,1,0,0,0,147,144,1,0,0,0,148,149,1,0,0,0,149,147,
        1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,5,34,0,0,152,156,
        1,0,0,0,153,156,3,27,13,0,154,156,3,25,12,0,155,142,1,0,0,0,155,
        153,1,0,0,0,155,154,1,0,0,0,156,24,1,0,0,0,157,161,7,1,0,0,158,160,
        7,2,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,
        1,0,0,0,162,26,1,0,0,0,163,161,1,0,0,0,164,168,7,3,0,0,165,167,7,
        4,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,
        0,0,0,169,28,1,0,0,0,170,168,1,0,0,0,171,173,5,13,0,0,172,171,1,
        0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,10,0,0,175,176,1,
        0,0,0,176,177,6,14,0,0,177,30,1,0,0,0,178,179,7,5,0,0,179,183,7,
        5,0,0,180,182,9,0,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,184,1,
        0,0,0,183,181,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,3,
        29,14,0,187,188,1,0,0,0,188,189,6,15,0,0,189,32,1,0,0,0,190,191,
        5,47,0,0,191,192,5,42,0,0,192,196,1,0,0,0,193,195,9,0,0,0,194,193,
        1,0,0,0,195,198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,
        1,0,0,0,198,196,1,0,0,0,199,200,5,42,0,0,200,201,5,47,0,0,201,202,
        1,0,0,0,202,203,6,16,0,0,203,34,1,0,0,0,11,0,101,129,134,149,155,
        161,168,172,183,196,1,6,0,0
    ]

class xAdvLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    AutomatonProperty = 8
    ViewportProperty = 9
    WS = 10
    Ignore = 11
    Value = 12
    INT = 13
    ID = 14
    NEWLINE = 15
    SingleLineComment = 16
    BlockComment = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "'define'", "'automaton'", "'{'", "':'", "'}'", 
            "'viewport'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "AutomatonProperty", "ViewportProperty", "WS", "Ignore", "Value", 
            "INT", "ID", "NEWLINE", "SingleLineComment", "BlockComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "AutomatonProperty", "ViewportProperty", "WS", "Ignore", 
                  "Value", "INT", "ID", "NEWLINE", "SingleLineComment", 
                  "BlockComment" ]

    grammarFileName = "xAdv.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


